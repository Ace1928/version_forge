# 🚀 Version Forge CI Pipeline v3.14.7
# Fractal test architecture that validates versioning integrity across dimensions

name: Version Forge CI

on:
  push:
    branches: [main, master, develop]
    paths-ignore:
      - "**/*.md"
      - "docs/**"
      - ".github/ISSUE_TEMPLATE/**"
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
    inputs:
      debug:
        description: "Enable quantum debugging mode"
        required: false
        default: false
        type: boolean
      version_check:
        description: "Perform deep version coherence analysis"
        required: false
        default: true
        type: boolean

# ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
# ┃ Environment variables for all jobs    ┃
# ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
env:
  PYTHONUNBUFFERED: 1
  FORCE_COLOR: 1
  POETRY_VIRTUALENVS_CREATE: false
  VERSION_COHERENCE_LEVEL: strict

jobs:
  validate:
    name: ⚙️ Validate
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      detected_version: ${{ steps.version-check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: check
        run: echo "should_run=true" >> $GITHUB_OUTPUT

      - id: version-check
        name: 🔢 Detect Version
        run: |
          VERSION=$(grep -Po "(?<=Version-)[\d\.]+(?=-blue)" README.md || echo "0.0.0")
          echo "Detected version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::warning::Version format suspicious - expecting semantic versioning"
          fi

  lint:
    name: 🧹 Lint
    needs: validate
    if: needs.validate.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
          cache-dependency-path: "**/requirements*.txt"

      - name: 📦 Install dependencies
        id: deps
        run: |
          python -m pip install --upgrade pip
          # If poetry.lock exists, use poetry - it's the elegant choice
          if [ -f pyproject.toml ] && [ -f poetry.lock ]; then
              pip install poetry
              poetry install --with dev
          # Otherwise fall back to pip - we're adaptable
          else
              pip install -e ".[dev]" || pip install -e .
              pip install black isort flake8 mypy pylint
          fi

      - name: 🔍 Check code formatting
        run: |
          black . --check --diff || echo "::warning::Code indentation seems to have lost its way in the labyrinth of whitespace"
          isort . --check --diff || echo "::warning::Import statements are having an existential crisis about their order"

      - name: 🔬 Lint with flake8
        run: |
          flake8 . --count --statistics --show-source --exit-zero

      - name: 🧬 Deep analysis with pylint
        run: |
          pylint --recursive=y ./version_forge --exit-zero || true

      - name: 📐 Type check with mypy
        run: |
          mypy ./version_forge --show-error-codes || echo "::warning::Types are confused about their identity"

      - name: 🔄 Version coherence check
        run: |
          # Check that version numbers are consistent across files
          VERSION_PYPROJECT=$(grep -Po "(?<=version = \")[0-9]+\.[0-9]+\.[0-9]+(?=\")" pyproject.toml || echo "not-found")
          VERSION_INIT=$(grep -Po "(?<=__version__ = \")[0-9]+\.[0-9]+\.[0-9]+(?=\")" version_forge/__init__.py || echo "not-found")
          README_VERSION="${{ needs.validate.outputs.detected_version }}"

          echo "Versions detected:"
          echo "  - pyproject.toml: $VERSION_PYPROJECT"
          echo "  - __init__.py: $VERSION_INIT"
          echo "  - README.md: $README_VERSION"

          if [[ "$VERSION_PYPROJECT" != "$VERSION_INIT" || "$VERSION_PYPROJECT" != "$README_VERSION" ]]; then
            echo "::warning::Version numbers are in disagreement. A house divided cannot stand!"
          fi

  test:
    name: 🧪 Test
    needs: [validate, lint]
    if: always() && needs.validate.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest]
        include:
          - python-version: "3.12"
            os: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: "**/requirements*.txt"

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f pyproject.toml ] && [ -f poetry.lock ]; then
              pip install poetry
              poetry install --with dev,test
          else
              pip install -e ".[dev,test]" || pip install -e .
              pip install pytest pytest-cov pytest-xdist hypothesis
          fi
        shell: bash

      - name: 🔍 Run tests
        run: |
          pytest --cov=version_forge --cov-report=xml --cov-report=term-missing -v -n auto

      - name: 🧠 Run version-specific tests
        run: |
          # Specific version parsing and compatibility checks
          if pytest -xvs version_forge/tests/test_versioning.py::test_version_parsing; then
            echo "✅ Version parsing tests passed"
          else
            echo "::error::Version parsing tests failed - our core competency is at stake!"
            exit 1
          fi

      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  docs:
    name: 📚 Documentation
    needs: [validate, lint]
    if: always() && needs.validate.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f pyproject.toml ] && [ -f poetry.lock ]; then
              pip install poetry
              poetry install --with docs
          else
              pip install -e ".[docs]" || pip install -e .
              pip install sphinx sphinx-rtd-theme myst-parser
          fi

      - name: 📝 Build docs
        run: |
          if [ -d "docs" ]; then
              cd docs
              make html
          else
              echo "::warning::No docs directory found. Even quantum computers need documentation"
              mkdir -p _build/html
              echo "<html><body><h1>Version Forge</h1><p>Documentation is coming soon. Time is relative.</p></body></html>" > _build/html/index.html
          fi

      - name: 📤 Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: docs-${{ github.sha }}
          path: docs/_build/html || _build/html
          retention-days: 7

  build:
    name: 📦 Build
    needs: [validate, test]
    if: always() && needs.validate.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools wheel

      - name: 🏗️ Build package
        run: |
          if [ -f pyproject.toml ]; then
              python -m build
          else
              python setup.py sdist bdist_wheel
          fi

      - name: ✅ Check package
        run: |
          twine check dist/* || echo "::warning::Package validation detected issues. Your future self will be disappointed."

      - name: 🔍 Validate version in package
        run: |
          VERSION="${{ needs.validate.outputs.detected_version }}"
          if [[ $(unzip -p dist/*.whl version_forge/__init__.py 2>/dev/null | grep -P "__version__\s*=\s*['\"]$VERSION['\"]" | wc -l) -eq 0 ]]; then
            echo "::warning::Package version doesn't match detected project version"
          fi

      - name: 📤 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ github.sha }}
          path: dist/
          retention-days: 7

  integration:
    name: 🔄 Integration
    needs: [validate, build]
    if: github.event_name == 'push' && needs.validate.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 📦 Download package
        uses: actions/download-artifact@v4
        with:
          name: package-${{ github.sha }}
          path: dist/

      - name: 🧪 Install and verify package
        run: |
          # Find wheel file - the embodiment of our work
          WHEEL=$(find dist -name "*.whl" | head -n 1)
          if [ -z "$WHEEL" ]; then
              echo "::error::No wheel found in artifacts! The circle is incomplete."
              exit 1
          fi

          # Install wheel in isolated environment - pure and untainted
          python -m venv test_env
          source test_env/bin/activate
          pip install $WHEEL

          # Extract package name - know thyself
          PKG_NAME=$(basename $WHEEL | cut -d'-' -f1 | tr '_' '-')
          echo "Testing package: $PKG_NAME"

          # Verify import works - existence precedes essence
          python -c "import version_forge; print(f'Successfully imported version_forge {version_forge.__version__}')"

          # Test core functionality - the essence of our being
          python -c "from version_forge import parse_version; v = parse_version('1.2.3'); print(f'Parsed version: {v}')"
        shell: bash

  compatibility:
    name: 🔄 Compatibility
    needs: [validate, build]
    if: github.event_name == 'push' && needs.validate.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: 📦 Download package
        uses: actions/download-artifact@v4
        with:
          name: package-${{ github.sha }}
          path: dist/

      - name: 🔍 Check version compatibility
        run: |
          # Install the current version
          python -m venv test_current
          source test_current/bin/activate
          WHEEL=$(find dist -name "*.whl" | head -n 1)
          pip install $WHEEL

          # Get the current version
          CURRENT=$(python -c "import version_forge; print(version_forge.__version__)")
          echo "Current version: $CURRENT"

          # Compare with previous version if available
          if pip install --index-url https://pypi.org/simple/ version-forge==; then
            PREVIOUS=$(python -c "import version_forge; print(version_forge.__version__)")
            echo "Previous version: $PREVIOUS"

            # Run our own compatibility check (oh, the irony!)
            python -c "from version_forge import is_compatible; compatible = is_compatible('$PREVIOUS', '$CURRENT'); print(f'Compatible: {compatible}')"

            if python -c "from version_forge import is_compatible; exit(0 if is_compatible('$PREVIOUS', '$CURRENT') else 1)"; then
              echo "✅ Version is compatible with previous release"
            else
              python -c "from version_forge import calculate_delta; print(calculate_delta('$PREVIOUS', '$CURRENT'))"
              echo "::warning::Version indicates breaking changes from previous release"
            fi
          else
            echo "No previous version found on PyPI, skipping compatibility check"
          fi
        continue-on-error: true

  pipeline:
    name: 🚀 Pipeline
    needs: [lint, test, docs, build, integration, compatibility]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: 📊 Pipeline Status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
              echo "::error::Pipeline failed! Time to debug with the precision of a chronometer surgeon."
              exit 1
          else
              echo "::notice::All checks passed! Version Forge continues its journey through semantic time and space. ʕ •ᴥ•ʔ"
          fi
